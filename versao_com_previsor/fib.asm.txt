main:
    mov r1, 0          # r1 = base address 0
    mov r2, 20         # r2 = size 20
    mov r3, 1          # r3 = first element 1
    mov r4, 1          # r4 = second element 1
    call fibonacci     # Jump to fibonacci function
    nop                # HALT equivalent

fibonacci:
    st r3, 0[r1]       # vector[0] = r3
    st r4, 4[r1]       # vector[1] = r4

    mov r5, 2          # r5 = 2

loop:
    cmp r5, r2        # Compare r5 and r2
    bgt end           # if r5 >= r2, jump to end

body:
    sub r9, r5, 1     # r9 = r5 - 1
    lsl r10, r9, 2    # r10 = r9 * 4
    add r9, r1, r10   # r9 = address of vector[i-1]
    ld r6, 0[r9]      # r6 = vector[i-1]

    sub r9, r5, 2     # r9 = r5 - 2
    lsl r10, r9, 2    # r10 = r9 * 4
    add r9, r1, r10   # r9 = address of vector[i-2]
    ld r7, 0[r9]      # r7 = vector[i-2]

    add r8, r6, r7    # r8 = r6 + r7

    lsl r9, r5, 2     # r9 = r5 * 4
    add r9, r1, r9    # r9 = address of vector[i]
    st r8, 0[r9]      # vector[i] = r8

    add r5, r5, 1     # r5 = r5 + 1
    b loop            # Jump to loop

end:
    ret               # Return from the function